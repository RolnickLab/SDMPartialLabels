#where to save checkpoints
save_path: "experiments/baseline_1And3_rtran_resnet18_RGB_ENV_fl"

# load existing checkpoint for inference. If passing experiment folder instead (for multiple seeds), it will evaluate all of them.
load_ckpt_path: "experiments/baseline_1And3_rtran_resnet18_RGB_ENV_fl"
save_preds_path: "" #"/network/scratch/h/hager.radi/ecosystem-embedding/baseline_resnet18_RGBNIR_ENV/preds_path"
log_comet: true

overfit_batches: 0.0
# maximum number of epochs to train for
max_epochs: 50
# base directory
base_dir: ""

comet:
  project_name: "workshop_paper"
  tags: ["rtran", "172butterfly_species", "ebird=independentbutterfly", "normalization", "known0.75", "resnet18", "att3", "head4", "dropout0.2", "allaug", "LR0.00009sched", "AdamW", "weight_decay0.01", "RGB_ENV"]
  experiment_name: "baseline_1And3_rtran_resnet18_RGB_ENV_fl" # specify for training, or use to report test results, TODO: also use to resume training
  experiment_key: "" # use to report test results,

experiment:
  #TASK and name should always be ebird_classifier --> maybe remove it
  task: "ebird_classifier"
  name: "ebird_classifier"
  seed: 42
  module:
    #choose model : "resnet18" "resnet50" "inceptionv3" "linear" (just a linear model)
    model: "resnet18"
    #"linear" or "linear_net" for a 2 layer MLP
    fc: "linear"
    #use pretrained weights ( torchvision )
    pretrained: False
    # resume training from another model (transfer learning), set empty if training from scratch
    resume: ""
    freeze: False
    #initializes biases of the output layer sothat sigmoid(bias) = mean over the training set for each species
    init_bias: ""
    means_path: ""
    lr: 0.00009

Rtran:
    use: true
    # Resnet18 or Resnet50
    backbone: "Resnet18"
    # use ImageNet pretrained weights
    pretrained_backbone: False
    # size of hidden feature vector: should match the backbone output feature size (512 for Resnet18, 2048 for Resnet50)
    features_size: 512
    # mask known labels out of the loss (true or false)
    masked_loss: False
    # quantized mask (1 if all positives to 1, > 1 to indicate bins)
    quantized_mask_bins: 4
    # use positional encoding
    use_positional_encoding: True
    # use the actual regression labels as input to the model and multiply with the embeddings (true or false)
    scale_embeddings_by_labels: False
    # max ratio of unknown labels during training
    train_known_ratio: 0.75
    # what known ratios do we consider when testing
    eval_known_ratio: 0.0 # [1.0, 0.9, 0.8, 0.5]
    # should the known values be masked out of the reported metrics or no
    mask_eval_metrics: True
    # eval family of birds (0), or family of butterflies (1)
    predict_family_of_species: 1


optimizer: "AdamW"  #"Adam", "AdamW", "SGD"

losses:
#scale attribute is just for plotting if the values are very small
  criterion: "Focal" #or MAE or MSE or Focal or RMSLE  (loss to choose for optim )

#auto lr will only work if there is only one optimizer
auto_lr_find: False
scheduler:
  name: "ReduceLROnPlateau" #"" for no schuler, "ReduceLROnPlateau" #"ReduceLROnPlateau" or "StepLR" "WarmUp"
  reduce_lr_plateau:
    factor: 0.5
    lr_schedule_patience: 20
  step_lr:
    step_size: 100
    gamma: 0.5
  warmup:
    warmup_epochs: 5
    max_epochs: 100

  cyclical:
    warmup_epochs: 10

variables: &default_vars
    ped_means: &ped_means []
    ped_std: &ped_std []
    bioclim_means: &bioclim_means []
    bioclim_std: &bioclim_std []

    sat_means: &sat_means []
    sat_stds: &sat_stds []

data:
  loaders:
    num_workers: 8
    batch_size: 128
  #What kind of satellite input ? "refl" for "raw" reflectance values or
  #"img" for 0-255 values (only supported for "rgb" and "nir" bands)
  datatype: "img"
  multiscale : [64]

  bands: ["r","g","b"]  #any subset of ["r", "g", "b", "nir"] if working with "refl" data or ["rgb", "nir"] if using "img"

  res: 10 #resolution of the images

  #o you want to use environmental data (pedological and bioclimatic (low res) data) #ped" or "bioclim" or both or empty list
  env: ["bioclim", "ped"]
  env_var_sizes: [19, 8]

  #resolution of pedological and bioclimatic data in meters
  ped:
      #pedological rasters
      res: 250
  bioclim:
      #bioclim
      res: 1000

  files:
    base: "/network/projects/ecosystem-embeddings"
    #TODO: trainer depends on the number of train files given, so it has to match val and test always (even if testing)
#    train: ["SatBird_data_v2/USA_summer/train_split_noncolocated_hotspots.csv", "SatButterfly_v1/USA/butterfly_hotspots_train.csv"] #1. everything (Combined dataloader)
    train: ["SatButterfly_v2/USA/butterfly_hotspots_ebird_train.csv"] #2. colocated birds+butterflies (Colocated datalaoder)
#    train: ["SatBird_data_v2/USA_summer/train_split.csv"] #3. birds only (with some butterflies colocated) (Colocated dataloader)
#    train: ["SatButterfly_v2/USA/butterfly_hotspots_ebird_train.csv", "SatButterfly_v1/USA/butterfly_hotspots_train.csv"] #4. all Butterflies (combined dataloader)

#    val: ["SatBird_data_v2/USA_summer/valid_split_noncolocated_hotspots.csv", "SatButterfly_v1/USA/butterfly_hotspots_valid.csv"]
    val: ["SatButterfly_v2/USA/butterfly_hotspots_ebird_valid.csv"]
#    val: ["SatBird_data_v2/USA_summer/valid_split.csv"]
#    val: ["SatButterfly_v2/USA/butterfly_hotspots_ebird_valid.csv", "SatButterfly_v1/USA/butterfly_hotspots_valid.csv"]

#    test: ["SatBird_data_v2/USA_summer/test_split_noncolocated_hotspots.csv", "SatButterfly_v1/USA/butterfly_hotspots_test.csv"]
    test: ["SatButterfly_v2/USA/butterfly_hotspots_ebird_all.csv"]
#    test: ["SatBird_data_v2/USA_summer/test_split.csv"]
#    test: ["SatButterfly_v2/USA/butterfly_hotspots_ebird_test.csv", "SatButterfly_v1/USA/butterfly_hotspots_test.csv"]

#    targets_folder: ["SatBird_data_v2/USA_summer/targets", "SatButterfly_v1/USA/targets_v1.2"] # (1, 4) Combined Dataloader
    targets_folder: ["SatBird_data_v2/USA_summer/targets", "SatButterfly_v2/USA/butterfly_targets_v1.2"] # (2) colocated birds+butterflies, (3) birds only
    images_folder: ["SatBird_data_v2/USA_summer/images", "SatButterfly_v1/USA/images"]
    env_data_folder: ["SatBird_data_v2/USA_summer/environmental", "SatButterfly_v1/USA/environmental_data"]
    correction_thresh: "SatBird_data_v2/USA_summer/range_maps.pkl" # range maps - threshold = False

    sat_means: "SatButterfly_v2/USA/stats/means_rgb_SatBirdxSatButterfly_notcolocated.npy"
    sat_stds: "SatButterfly_v2/USA/stats/stds_rgb_SatBirdxSatButterfly_notcolocated.npy"

    env_means: "SatButterfly_v2/USA/stats/env_means_SatBirdxSatButterfly_notcolocated.npy"
    env_stds: "SatButterfly_v2/USA/stats/env_stds_SatBirdxSatButterfly_notcolocated.npy"

    species_list: "/network/projects/ecosystem-embeddings/SatButterfly_v2/USA/species_list_USA_birds+butterflies.txt"

  correction_factor:
     thresh: # to train with RM

  target:
    type: "probs"  #binary for classification targets  or "probs" for regression (default should be "probs")

    # choose subset of birds : "ducks" for trying on species [37] or [2] for cooper's hawk (non passerine) "songbirds" (307 species) or None (full set 684 species) "not_songbirds"
    subset:

  #normalization: None
  transforms:
    - name: matchres
      ignore: false
      subset: ["bioclim", "ped"]
      target_size: [64, 64]
      custom_means: [*bioclim_means, *ped_means]

    - name: crop
      ignore: false
      p: 1
      ignore_band: ["bioclim", "ped"] #["bioclim", "ped"]
      center: true # disable randomness, crop around the image's center
      height: 64
      width: 64
    - name: hflip
      ignore: "val"
      p: 0.5
    - name: vflip
      ignore: "val"
      p: 0.5
    - name: normalize
      normalize_by_255: False
      ignore: False
      maxchan: false
      subset: ["sat"]
      custom: [*sat_means, *sat_stds]

    - name: normalize
      normalize_by_255: False
      ignore: False
      maxchan: false
      subset: ["bioclim"]
      custom: [*bioclim_means, *bioclim_std]
    - name: normalize
      normalize_by_255: False
      ignore: False
      maxchan: false
      subset: ["ped"]
      custom: [*ped_means, *ped_std]
    - name: randomnoise
      ignore: "val"
      std: 0.01
      max_noise: 0.05
      p: 0.35

    - name: blur
      ignore: "val"
      p: 0.5
      val: 0.1

    - name: rotate
      ignore: "val"
      p: 0.5
      val: 15

    - name: randomcontrast
      ignore: "val"
      p: 0.35
      val: 2

    - name: randombrightness
      ignore: "val"
      p: 0.3
      val: 2

  species: [670, 172]
#  species: [ 670, 601]
  total_species: 842  #1271 # list if more than one family of species, otherwise, normal count
trainer:
  auto_scale_batch_size: False
