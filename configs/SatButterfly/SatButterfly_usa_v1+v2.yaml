#where to save checkpoints
save_path: "SatButterfly_v1+v2_baseline_Resnet18_RGBNIR_env_CE"

# load existing checkpoint for inference. If passing experiment folder instead (for multiple seeds), it will evaluate all of them.
load_ckpt_path: "SatButterfly_v1+v2_baseline_Resnet18_RGBNIR_env_CE"
save_preds_path: ""
log_comet: true

overfit_batches: 0.0
# maximum number of epochs to train for
max_epochs: 50
# base directory
base_dir: ""

comet:
  project_name: "new_baselines"
  tags: ["Resnet18", "bothSatbutterflyv1+v2", "CE", "172speciesonly", "Env_normalization"]
  experiment_name: "SatButterfly_v1+v2_baseline_Resnet18_RGBNIR_env_CE" # specify for training, or use to report test results, TODO: also use to resume training
  experiment_key: "" # use to report test results,

experiment:
  seed: 42
  module:
    #choose model : "resnet18" "resnet50" "inceptionv3" "linear" (just a linear model)
    model: "resnet18"
    #"linear" or "linear_net" for a 2 layer MLP
    fc: "linear"
    #use pretrained weights ( torchvision )
    pretrained: True
    # resume training from another model (transfer learning), set empty if training from scratch
    resume: #"/home/mila/h/hager.radi/scratch/ecosystem-embedding/baseline_rtran_resnet18_RGBNIR_ENV_8/1337/epoch=29-step=20069.ckpt"
    # freeze backbone when transfer learning or not
    freeze: False
    #initializes biases of the output layer sothat sigmoid(bias) = mean over the training set for each species
    init_bias: ""
    means_path: ""
    lr: 0.0001

use_rtran: False

optimizer: "Adam"  #"Adam"

losses:
#scale attribute is just for plotting if the values are very small
  criterion: "CE" #or MAE or MSE or Focal or RMSLE  (loss to choose for optim )

#auto lr will only work if there is only one optimizer
auto_lr_find: False
scheduler:
  name: "ReduceLROnPlateau" #"" for no schuler, "ReduceLROnPlateau" #"ReduceLROnPlateau" or "StepLR" "WarmUp"
  reduce_lr_plateau:
    factor: 0.5
    lr_schedule_patience: 20
  step_lr:
    step_size: 100
    gamma: 0.5
  warmup:
    warmup_epochs: 5
    max_epochs: 100
  cyclical:
    warmup_epochs: 10

variables: &default_vars
    ped_means: &ped_means []
    ped_std: &ped_std []
    bioclim_means: &bioclim_means []
    bioclim_std: &bioclim_std []

    rgbnir_means: &rgbnir_means []
    rgbnir_std: &rgbnir_std []

    visual_means: &visual_means []
    visual_stds: &visual_stds []

data:
  loaders:
    num_workers: 8
    batch_size: 128
  #What kind of satellite input ? "refl" for "raw" reflectance values or 
  #"img" for 0-255 values (only supported for "rgb" and "nir" bands)
  datatype: "refl"
  multiscale : [64]
  
  bands: ["r","g","b", "nir"]  #any subset of ["r", "g", "b", "nir"] if working with "refl" data or ["rgb", "nir"] if using "img" 

  res: 10 #resolution of the images

  #o you want to use environmental data (pedological and bioclimatic (low res) data) #ped" or "bioclim" or both or empty list
  env: ["bioclim", "ped"]
  env_var_sizes: [19, 8]

  #resolution of pedological and bioclimatic data in meters
  ped:
      #pedological rasters
      res: 250
  bioclim:
      #bioclim
      res: 1000

  files:
    base: "/network/projects/ecosystem-embeddings"
    train: ["SatBird_data_v2/USA_summer/butterfly_hotspots_ebird_train.csv", "SatButterfly_v2/USA/butterfly_hotspots_train.csv"]
    val: ["SatBird_data_v2/USA_summer/butterfly_hotspots_ebird_valid.csv", "SatButterfly_v2/USA/butterfly_hotspots_valid.csv"]
    test: ["SatBird_data_v2/USA_summer/butterfly_hotspots_ebird_test.csv", "SatButterfly_v2/USA/butterfly_hotspots_test.csv"]

    targets_folder: ["SatBird_data_v2/USA_summer/butterfly_targets_v1.2", "SatButterfly_v2/USA/targets_v2.2"]
    images_folder: ["SatBird_data_v2/USA_summer/images", "SatButterfly_v2/USA/images"]
    env_data_folder: ["SatBird_data_v2/USA_summer/environmental_bounded", "SatButterfly_v2/USA/environmental_data"]
    correction_thresh: ["final_range_maps.pkl"] # range maps - threshold = False

    rgbnir_means: "SatButterfly_v2/USA/stats/means_rgbnir_butterfly_v1+v2.npy"
    rgbnir_stds: "SatButterfly_v2/USA/stats/stds_rgbnir_butterfly_v1+v2.npy"

    rgb_means: "stats/means_summer_images_visual.npy"
    rgb_stds: "stats/stds_summer_images_visual.npy"

    env_means: "SatButterfly_v2/USA/stats/env_means_butterfly_v1+v2.npy"
    env_stds: "SatButterfly_v2/USA/stats/env_stds_butterfly_v1+v2.npy"

  correction_factor:
     thresh:  # to train with RM

  target:
    type: "probs"  #binary for classification targets  or "probs" for regression (default should be "probs")

    # choose subset of birds : "ducks" for trying on species [37] or [2] for cooper's hawk (non passerine) "songbirds" (307 species) or None (full set 684 species) "not_songbirds"
    subset:

  #normalization: None
  transforms:
    - name: matchres
      ignore: false
      subset: ["bioclim", "ped"]
      target_size: [64, 64]
      custom_means: [*bioclim_means, *ped_means]

    - name: crop
      ignore: false
      p: 1
      ignore_band: ["bioclim", "ped"] #["bioclim", "ped"]
      center: true # disable randomness, crop around the image's center
      height: 64
      width: 64
    - name: hflip
      ignore: "val"
      p: 0.5
    - name: vflip
      ignore: "val"
      p: 0.5
    - name: normalize
      ignore: False
      maxchan: false
      subset: ["sat"]
      custom: [*rgbnir_means, *rgbnir_std]

    - name: normalize
      ignore: False
      maxchan: false
      subset: ["bioclim"]
      custom: [*bioclim_means, *bioclim_std]
    - name: normalize
      ignore: False
      maxchan: false
      subset: ["ped"]
      custom: [*ped_means, *ped_std]
    - name: randomnoise
      ignore: True #false
      std: 0.01
      max_noise: 0.05

  total_species: 172
trainer:
  auto_scale_batch_size: False
